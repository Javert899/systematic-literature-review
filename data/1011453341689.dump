{"status":"ok","message-type":"work","message-version":"1.0.0","message":{"indexed":{"date-parts":[[2019,12,4]],"date-time":"2019-12-04T18:40:09Z","timestamp":1575484809864},"reference-count":39,"publisher":"Association for Computing Machinery (ACM)","issue":"ICFP","license":[{"URL":"http:\/\/www.acm.org\/publications\/policies\/copyright_policy#Background","start":{"date-parts":[[2019,7,26]],"date-time":"2019-07-26T00:00:00Z","timestamp":1564099200000},"delay-in-days":0,"content-version":"vor"}],"funder":[{"DOI":"10.13039\/501100008982","name":"National Science Foundation","doi-asserted-by":"publisher","award":["CCF-1816837, CCF-1618732, CCF-1453796, CCF-1422133"]}],"content-domain":{"domain":[],"crossmark-restriction":false},"short-container-title":["Proc. ACM Program. Lang."],"published-print":{"date-parts":[[2019,7,26]]},"DOI":"10.1145\/3341689","type":"journal-article","created":{"date-parts":[[2019,7,29]],"date-time":"2019-07-29T20:55:51Z","timestamp":1564433751000},"page":"1-29","source":"Crossref","is-referenced-by-count":1,"title":["The next 700 compiler correctness theorems (functional pearl)"],"prefix":"10.1145","volume":"3","author":[{"given":"Daniel","family":"Patterson","sequence":"first","affiliation":[{"name":"Northeastern University, USA"}]},{"given":"Amal","family":"Ahmed","sequence":"additional","affiliation":[{"name":"Northeastern University, USA"}]}],"member":"320","reference":[{"key":"key-10.1145\/3341689-1","unstructured":"Amal Ahmed. 2006. Step-Indexed Syntactic Logical Relations for Recursive and Quantified Types. In European Symposium on Programming (ESOP). 69&#8211;83.","DOI":"10.1007\/11693024_6","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-2","unstructured":"Amal Ahmed. 2015. Verified Compilers for a Multi-Language World. In 1st Summit on Advances in Programming Languages (SNAPL 2015) (Leibniz International Proceedings in Informatics (LIPIcs)), Thomas Ball, Rastislav Bodik, Shriram Krishnamurthi, Benjamin S. Lerner, and Greg Morrisett (Eds.), Vol. 32. 15&#8211;31."},{"key":"key-10.1145\/3341689-3","unstructured":"Amal Ahmed and Matthias Blume. 2008. Typed Closure Conversion Preserves Observational Equivalence. In International Conference on Functional Programming (ICFP), Victoria, British Columbia, Canada. 157&#8211;168."},{"key":"key-10.1145\/3341689-4","unstructured":"Amal Ahmed and Matthias Blume. 2011. An Equivalence-Preserving CPS Translation via Multi-Language Semantics. In International Conference on Functional Programming (ICFP), Tokyo, Japan. 431&#8211;444."},{"key":"key-10.1145\/3341689-5","unstructured":"Amal Ahmed, Derek Dreyer, and Andreas Rossberg. 2009. State-Dependent Representation Independence. In ACM Symposium on Principles of Programming Languages (POPL), Savannah, Georgia.","DOI":"10.1145\/1480881.1480925","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-6","unstructured":"Nick Benton and Chung-Kil Hur. 2009. Biorthogonality, Step-Indexing and Compiler Correctness. In International Conference on Functional Programming (ICFP), Edinburgh, Scotland.","DOI":"10.1145\/1596550.1596567","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-7","unstructured":"Lennart Beringer, Gordon Stewart, Robert Dockins, and Andrew W. Appel. 2014. Verified Compilation for Shared-Memory C. In European Symposium on Programming (ESOP).","DOI":"10.1007\/978-3-642-54833-8_7","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-8","unstructured":"William J. Bowman and Amal Ahmed. 2015. Noninterference for Free. In International Conference on Functional Programming (ICFP), Vancouver, British Columbia, Canada.","DOI":"10.1145\/2784731.2784733","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-9","unstructured":"Adam Chlipala. 2007. A Certified Type-Preserving Compiler from Lambda Calculus to Assembly Language. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), San Diego, California.","DOI":"10.1145\/1250734.1250742","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-10","unstructured":"Matthias Felleisen. 1990. On the Expressive Power of Programming Languages. In Science of Computer Programming. Springer-Verlag, 134&#8211;151."},{"key":"key-10.1145\/3341689-11","unstructured":"Ronghui Gu, J&#233;r&#233;mie Koenig, Tahina Ramananandro, Zhong Shao, Xiongnan (Newman) Wu, Shu-Chun Weng, Haozhong Zhang, and Yu Guo. 2015. Deep Specifications and Certified Abstraction Layers. In ACM Symposium on Principles of Programming Languages (POPL), Mumbai, India. 595&#8211;608."},{"key":"key-10.1145\/3341689-12","unstructured":"Chung-Kil Hur and Derek Dreyer. 2011. A Kripke logical relation between ML and assembly. In ACM Symposium on Principles of Programming Languages (POPL), Austin, Texas."},{"key":"key-10.1145\/3341689-13","unstructured":"Hanru Jiang, Hongjin Liang, Siyang Xiao, Junpeng Zha, and Xinyu Feng. 2019. Towards certified separate compilation for concurrent programs. In Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation. ACM, 111&#8211;125."},{"key":"key-10.1145\/3341689-14","unstructured":"Jeehoon Kang, Yoonseung Kim, Chung-Kil Hur, Derek Dreyer, and Viktor Vafeiadis. 2016. Lightweight Verification of Separate Compilation. In ACM Symposium on Principles of Programming Languages (POPL), St. Petersburg, Florida. ACM, 178&#8211;190."},{"key":"key-10.1145\/3341689-15","unstructured":"Xavier Leroy. 2006. Formal certification of a compiler back-end or: programming a compiler with a proof assistant. In ACM Symposium on Principles of Programming Languages (POPL), Charleston, South Carolina.","DOI":"10.1145\/1111037.1111042","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-16","unstructured":"Xavier Leroy. 2009. A formally verified compiler back-end. Journal of Automated Reasoning 43, 4 (2009), 363&#8211;446."},{"key":"key-10.1145\/3341689-17","unstructured":"Phillip Mates, Jamie Perconti, and Amal Ahmed. 2019. Under Control: Compositionally Correct Closure Conversion with Mutable State. In ACM Conference on Principles and Practice of Declarative Programming (PPDP).","DOI":"10.1145\/3354166.3354181","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-18","unstructured":"Jacob Matthews and Robert Bruce Findler. 2007. Operational Semantics for Multi-Language Programs. In ACM Symposium on Principles of Programming Languages (POPL), Nice, France. 3&#8211;10."},{"key":"key-10.1145\/3341689-19","unstructured":"John McCarthy. 1959. A Basis for a Mathematical Theory of Computation. Studies in Logic and the Foundations of Mathematics, 33&#8211;70."},{"key":"key-10.1145\/3341689-20","unstructured":"John McCarthy and James Painter. 1967. Correctness of a compiler for arithmetic expressions. American Mathematical Society, 33&#8211;41."},{"key":"key-10.1145\/3341689-21","unstructured":"Yasuhiko Minamide, Greg Morrisett, and Robert Harper. 1996. Typed Closure Conversion. In ACM Symposium on Principles of Programming Languages (POPL), St. Petersburg Beach, Florida. 271&#8211;283."},{"key":"key-10.1145\/3341689-22","unstructured":"F Lockwood Morris. 1973. Advice on structuring compilers and proving them correct. In Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages. ACM, 144&#8211;152."},{"key":"key-10.1145\/3341689-23","unstructured":"Georg Neis, Chung-Kil Hur, Jan-Oliver Kaiser, Craig McLaughlin, Derek Dreyer, and Viktor Vafeiadis. 2015. Pilsner: A Compositionally Verified Compiler for a Higher-Order Imperative Language. In International Conference on Functional Programming (ICFP), Vancouver, British Columbia, Canada.","DOI":"10.1145\/2784731.2784764","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-24","unstructured":"Max S. New, William J. Bowman, and Amal Ahmed. 2016. Fully Abstract Compilation via Universal Embedding. In International Conference on Functional Programming (ICFP), Nara, Japan.","DOI":"10.1145\/2951913.2951941","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-25","unstructured":"Liam O&#8217;Connor, Zilin Chen, Christine Rizkallah, Sidney Amani, Japheth Lim, Toby Murray, Yutaka Nagashima, Thomas Sewell, and Gerwin Klein. 2016. Refinement through restraint: Bringing down the cost of verification. In ACM SIGPLAN Notices, Vol. 51. ACM, 89&#8211;102."},{"key":"key-10.1145\/3341689-26","unstructured":"Marco Patrignani, Pieter Agten, Raoul Strackx, Bart Jacobs, Dave Clarke, and Frank Piessens. 2015. Secure Compilation to Protected Module Architectures. ACM Transactions on Programming Languages and Systems 37, 2, Article 6 (April 2015), 50 pages.","DOI":"10.1145\/2699503","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-27","unstructured":"Marco Patrignani, Amal Ahmed, and Dave Clarke. 2019. Formal Approaches to Secure Compilation: A Survey of Fully Abstract Compilation and Related Work. Comput. Surveys 51, 6, Article 125 (Feb. 2019), 36 pages.","DOI":"10.1145\/3280984","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-28","unstructured":"Daniel Patterson and Amal Ahmed. 2017. Linking Types for Multi-Language Software: Have Your Cake and Eat It Too. In 2nd Summit on Advances in Programming Languages (SNAPL 2017) (Leibniz International Proceedings in Informatics (LIPIcs)), Benjamin S. Lerner, Rastislav Bod&#237;k, and Shriram Krishnamurthi (Eds.), Vol. 71. Schloss Dagstuhl&#8211;Leibniz-Zentrum fuer Informatik, Dagstuhl, Germany, 12:1&#8211;12:15."},{"key":"key-10.1145\/3341689-29","unstructured":"Daniel Patterson and Amal Ahmed. 2019. CCC: Supplementary Materials. https:\/\/dbp.io\/pubs\/2019\/ccc\/"},{"key":"key-10.1145\/3341689-30","unstructured":"Daniel Patterson, Jamie Perconti, Christos Dimoulas, and Amal Ahmed. 2017. FunTAL: Reasonably Mixing a Functional Language with Assembly. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Barcelona, Spain.","DOI":"10.1145\/3062341.3062347","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-31","unstructured":"James T. Perconti and Amal Ahmed. 2014. Verifying an Open Compiler Using Multi-Language Semantics. In European Symposium on Programming (ESOP).","DOI":"10.1007\/978-3-642-54833-8_8","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-32","unstructured":"Tahina Ramananandro, Zhong Shao, Shu-Chun Weng, J&#233;r&#233;mie Koenig, and Yuchen Fu. 2015. A Compositional Semantics for Verified Separate Compilation and Linking. In Proceedings of the 2015 Conference on Certified Programs and Proofs (CPP &#8217;15). ACM, New York, NY, USA, 3&#8211;14."},{"key":"key-10.1145\/3341689-33","unstructured":"Jerome H. Saltzer and Michael D. Schroeder. 1975. The Protection of Information in Computer Systems. Proc. IEEE 63, 9 (September 1975), 1278&#8211;1308. http:\/\/web.mit.edu\/Saltzer\/www\/publications\/protection\/index.html","DOI":"10.1109\/PROC.1975.9939","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-34","unstructured":"Jaroslav &#710; Sev&#269;ik, Viktor Vafeiadis, Francesco Zappa Nardelli, Suresh Jagannathan, and Peter Sewell. 2011. Relaxed-memory concurrency and verified compilation. ACM SIGPLAN Notices 46, 1 (2011), 43&#8211;54."},{"key":"key-10.1145\/3341689-35","unstructured":"Gordon Stewart, Lennart Beringer, Santiago Cuellar, and Andrew W. Appel. 2015. Compositional CompCert. In ACM Symposium on Principles of Programming Languages (POPL), Mumbai, India.","DOI":"10.1145\/2676726.2676985","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-36","unstructured":"James Gordon Stewart. 2015. Verified Separate Compilation for C. Ph.D. Dissertation. Princeton University."},{"key":"key-10.1145\/3341689-37","unstructured":"Peng Wang, Santiago Cuellar, and Adam Chlipala. 2014. Compiler Verification Meets Cross-Language Linking via Data Abstraction. In ACM Symposium on Object Oriented Programming: Systems, Languages, and Applications (OOPSLA).","DOI":"10.1145\/2660193.2660201","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3341689-38","unstructured":"Yuting Wang, Pierre Wilke, and Zhong Shao. 2019. An abstract stack based approach to verified compositional compilation to machine code. Proceedings of the ACM on Programming Languages 3, POPL (2019), 62."},{"key":"key-10.1145\/3341689-39","unstructured":"Xuejun Yang, Yang Chen, Eric Eide, and John Regehr. 2011. Finding and Understanding Bugs in C Compilers. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), San Jose, California.","DOI":"10.1145\/1993498.1993532","doi-asserted-by":"crossref"}],"container-title":["Proceedings of the ACM on Programming Languages"],"original-title":[],"language":"en","link":[{"URL":"http:\/\/dl.acm.org\/ft_gateway.cfm?id=3341689&ftid=2076166&dwn=1","content-type":"unspecified","content-version":"vor","intended-application":"similarity-checking"}],"deposited":{"date-parts":[[2019,12,4]],"date-time":"2019-12-04T18:08:10Z","timestamp":1575482890000},"score":1.0,"subtitle":[],"short-title":[],"issued":{"date-parts":[[2019,7,26]]},"references-count":39,"journal-issue":{"published-print":{"date-parts":[[2019,7,26]]},"issue":"ICFP"},"URL":"http:\/\/dx.doi.org\/10.1145\/3341689","relation":{"cites":[]},"ISSN":["2475-1421"],"issn-type":[{"value":"2475-1421","type":"electronic"}]}}