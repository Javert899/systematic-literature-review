{"status":"ok","message-type":"work","message-version":"1.0.0","message":{"indexed":{"date-parts":[[2019,10,2]],"date-time":"2019-10-02T22:40:20Z","timestamp":1570056020437},"reference-count":30,"publisher":"Association for Computing Machinery (ACM)","issue":"ICFP","license":[{"URL":"http:\/\/www.acm.org\/publications\/policies\/copyright_policy#Background","start":{"date-parts":[[2017,8,29]],"date-time":"2017-08-29T00:00:00Z","timestamp":1503964800000},"delay-in-days":0,"content-version":"vor"}],"funder":[{"DOI":"10.13039\/501100000266","name":"Engineering and Physical Sciences Research Council","doi-asserted-by":"publisher","award":["EP\/N028759\/1"]}],"content-domain":{"domain":[],"crossmark-restriction":false},"short-container-title":["Proc. ACM Program. Lang."],"published-print":{"date-parts":[[2017,8,29]]},"DOI":"10.1145\/3110262","type":"journal-article","created":{"date-parts":[[2017,8,29]],"date-time":"2017-08-29T18:19:41Z","timestamp":1504030781000},"page":"1-27","source":"Crossref","is-referenced-by-count":3,"title":["Verifying efficient function calls in CakeML"],"prefix":"10.1145","volume":"1","author":[{"given":"Scott","family":"Owens","sequence":"first","affiliation":[{"name":"University of Kent, UK"}]},{"given":"Michael","family":"Norrish","sequence":"additional","affiliation":[{"name":"Data61 at CSIRO, Australia \/ Australian National University, Australia"}]},{"given":"Ramana","family":"Kumar","sequence":"additional","affiliation":[{"name":"Data61 at CSIRO, Australia \/ UNSW, Australia"}]},{"given":"Magnus O.","family":"Myreen","sequence":"additional","affiliation":[{"name":"Chalmers University of Technology, Sweden"}]},{"given":"Yong Kiam","family":"Tan","sequence":"additional","affiliation":[{"name":"Carnegie Mellon University, USA"}]}],"member":"320","reference":[{"key":"key-10.1145\/3110262-1","unstructured":"Umut A. Acar, Amal Ahmed, and Matthias Blume. 2008. Imperative self-adjusting computation. In Proceedings of the 35th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2008 . ACM, 309&#8211;322.","DOI":"10.1145\/1328438.1328476","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-2","unstructured":"Amal Ahmed. 2015. Verified Compilers for a Multi-Language World. In 1st Summit on Advances in Programming Languages (SNAPL 2015) (Leibniz International Proceedings in Informatics (LIPIcs)) , Vol. 32. Schloss Dagstuhl&#8211;Leibniz-Zentrum fuer Informatik, 15&#8211;31."},{"key":"key-10.1145\/3110262-3","unstructured":"Amal J. Ahmed. 2006. Step-Indexed Syntactic Logical Relations for Recursive and Quantified Types. In Programming Languages and Systems, 15th European Symposium on Programming, ESOP 2006 (Lecture Notes in Computer Science) , Peter Sestoft (Ed.), Vol. 3924. Springer, 69&#8211;83.","DOI":"10.1007\/11693024_6","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-4","unstructured":"Nada Amin and Tiark Rompf. 2017. Type Soundness Proofs with Definitional Interpreters. In Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages (POPL 2017) . ACM, 666&#8211;679.","DOI":"10.1145\/3009837.3009866","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-5","unstructured":"Andrew W. Appel. 1992. Compiling with Continuations. Cambridge University Press.","DOI":"10.1017\/CBO9780511609619","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-6","unstructured":"Andrew W. Appel and David A. McAllester. 2001. An indexed model of recursive types for foundational proof-carrying code. ACM Trans. Program. Lang. Syst. 23, 5 (2001), 657&#8211;683.","DOI":"10.1145\/504709.504712","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-7","unstructured":"Nick Benton and Chung-Kil Hur. 2009. Biorthogonality, step-indexing and compiler correctness. In Proceeding of the 14th ACM SIGPLAN International Conference on Functional Programming, ICFP 2009 . ACM, 97&#8211;108.","DOI":"10.1145\/1596550.1596567","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-8","unstructured":"R.S. Boyer and J S. Moore. 1996. Mechanized Formal Reasoning about Programs and Computing Machines.. In Automated Reasoning and Its Applications: Essays in Honor of Larry Wos . MIT Press."},{"key":"key-10.1145\/3110262-9","unstructured":"Joachim Breitner. 2015. Formally Proving a Compiler Transformation Safe. In Proceedings of the 2015 ACM SIGPLAN Symposium on Haskell (Haskell &#8217;15) . ACM, 35&#8211;46.","DOI":"10.1145\/2804302.2804312","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-10","unstructured":"Adam Chlipala. 2010. A Verified Compiler for an Impure Functional Language. In Proceedings of the 37th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2010 . ACM, 93&#8211;106.","DOI":"10.1145\/1706299.1706312","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-11","unstructured":"Zaynah Dargaye and Xavier Leroy. 2009. A verified framework for higher-order uncurrying optimizations. Higher-Order and Symbolic Computation 22, 3 (2009), 199&#8211;231.","DOI":"10.1007\/s10990-010-9050-z","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-12","unstructured":"Dominique Devriese, Marco Patrignani, and Frank Piessens. 2016. Fully-abstract compilation by approximate back-translation. In Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2016. ACM, 164&#8211;177.","DOI":"10.1145\/2837614.2837618","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-13","unstructured":"Derek Dreyer, Georg Neis, and Lars Birkedal. 2012. The impact of higher-order state and control effects on local relational reasoning. J. Funct. Program. 22, 4-5 (2012), 477&#8211;528."},{"key":"key-10.1145\/3110262-14","unstructured":"Cormac Flanagan, Amr Sabry, Bruce F. Duba, and Matthias Felleisen. 1993. The Essence of Compiling with Continuations. In Proceedings of the ACM SIGPLAN 1993 Conference on Programming Language Design and Implementation (PLDI &#8217;93). ACM, 237&#8211;247.","DOI":"10.1145\/155090.155113","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-15","unstructured":"Arma&#235;l Gu&#233;neau, Magnus O. Myreen, Ramana Kumar, and Michael Norrish. 2017. Verified Characteristic Formulae for CakeML. In Programming Languages and Systems: 26th European Symposium on Programming, ESOP 2017, Hongseok Yang (Ed.). Springer, 584&#8211;610.","DOI":"10.1007\/978-3-662-54434-1_22","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-16","unstructured":"Chung-Kil Hur and Derek Dreyer. 2011. A Kripke logical relation between ML and assembly. In Proceedings of the 38th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2011 . ACM, 133&#8211;146.","DOI":"10.1145\/1926385.1926402","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-17","unstructured":"Ramana Kumar, Magnus O. Myreen, Michael Norrish, and Scott Owens. 2014. CakeML: A Verified Implementation of ML. In POPL &#8217;14: Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. ACM Press, 179&#8211;191.","DOI":"10.1145\/2535838.2535841","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-18","unstructured":"Xavier Leroy. 2009. A Formally Verified Compiler Back-end. J. Autom. Reasoning 43, 4 (2009), 363&#8211;446.","DOI":"10.1007\/s10817-009-9155-4","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-19","unstructured":"Simon Marlow and Simon Peyton Jones. 2006. Making a fast curry: Push\/Enter vs. Eval\/Apply for higher-order languages. J. Funct. Program. 16, 4-5 (2006), 415&#8211;449."},{"key":"key-10.1145\/3110262-20","unstructured":"Magnus O. Myreen and Jared Davis. 2011. A Verified Runtime for a Verified Theorem Prover. In Interactive Theorem Proving -Second International Conference, ITP 2011 (Lecture Notes in Computer Science) , Marko C. J. D. van Eekelen, Herman Geuvers, Julien Schmaltz, and Freek Wiedijk (Eds.), Vol. 6898. Springer, 265&#8211;280.","DOI":"10.1007\/978-3-642-22863-6_20","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-21","unstructured":"Magnus O. Myreen and Scott Owens. 2014. Proof-producing Translation of Higher-order logic into Pure and Stateful ML. Journal of Functional Programming 24, 2-3 (May 2014), 284&#8211;315."},{"key":"key-10.1145\/3110262-22","unstructured":"Georg Neis, Chung-Kil Hur, Jan-Oliver Kaiser, Craig McLaughlin, Derek Dreyer, and Viktor Vafeiadis. 2015. Pilsner: a compositionally verified compiler for a higher-order imperative language. In Proceedings of the 20th ACM SIGPLAN International Conference on Functional Programming, ICFP 2015 . 166&#8211;178.","DOI":"10.1145\/2784731.2784764","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-23","unstructured":"Max S. New, William J. Bowman, and Amal Ahmed. 2016. Fully abstract compilation via universal embedding. In Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming, ICFP 2016 . ACM, 103&#8211;116.","DOI":"10.1145\/2951913.2951941","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-24","unstructured":"Scott Owens, Magnus O. Myreen, Ramana Kumar, and Yong Kiam Tan. 2016. Functional Big-step Semantics. In Programming Languages and Systems: 25th European Symposium on Programming, ESOP 2016 (Lecture Notes in Computer Science) , Peter Thiemann (Ed.), Vol. 9632. Springer, 589&#8211;615.","DOI":"10.1007\/978-3-662-49498-1_23","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-25","unstructured":"James T. Perconti and Amal Ahmed. 2014. Verifying an Open Compiler Using Multi-language Semantics. In Programming Languages and Systems - 23rd European Symposium on Programming, ESOP 2014 (Lecture Notes in Computer Science) , Zhong Shao (Ed.), Vol. 8410. Springer, 128&#8211;148.","DOI":"10.1007\/978-3-642-54833-8_8","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-26","unstructured":"Andrew M. Pitts. 1994. Computational adequacy via &#8216;mixed&#8217; inductive definitions. Springer Berlin Heidelberg, 72&#8211;82."},{"key":"key-10.1145\/3110262-27","unstructured":"Jeremy Siek. 2013. Type Safety in Three Easy Lemmas. (2013). http:\/\/siek.blogspot.com\/2013\/05\/ type-safety-in-three-easy-lemmas.html ."},{"key":"key-10.1145\/3110262-28","unstructured":"Yong Kiam Tan, Magnus O. Myreen, Ramana Kumar, Anthony Fox, Scott Owens, and Michael Norrish. 2016. A New Verified Compiler Backend for CakeML. In ICFP &#8217;16: Proceedings of the 21th ACM SIGPLAN International Conference on Functional Programming . ACM Press, 60&#8211;73.","DOI":"10.1145\/2951913.2951924","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-29","unstructured":"Yong Kiam Tan, Scott Owens, and Ramana Kumar. 2015. A Verified Type System for CakeML. In 27th Symposium on the Implementation and Application of Functional Programming Languages, IFL 2015 . ACM Press.","DOI":"10.1145\/2897336.2897344","doi-asserted-by":"crossref"},{"key":"key-10.1145\/3110262-30","unstructured":"William D. Young. 1989. A Mechanically Verified Code Generator. J. Autom. Reasoning 5, 4 (1989), 493&#8211;518.","DOI":"10.1007\/BF00243134","doi-asserted-by":"crossref"}],"container-title":["Proceedings of the ACM on Programming Languages"],"original-title":[],"language":"en","link":[{"URL":"http:\/\/dl.acm.org\/ft_gateway.cfm?id=3110262&ftid=1902044&dwn=1","content-type":"unspecified","content-version":"vor","intended-application":"similarity-checking"}],"deposited":{"date-parts":[[2019,10,2]],"date-time":"2019-10-02T22:16:31Z","timestamp":1570054591000},"score":1.0,"subtitle":[],"short-title":[],"issued":{"date-parts":[[2017,8,29]]},"references-count":30,"journal-issue":{"published-print":{"date-parts":[[2017,8,29]]},"issue":"ICFP"},"URL":"http:\/\/dx.doi.org\/10.1145\/3110262","relation":{"cites":[]},"ISSN":["2475-1421"],"issn-type":[{"value":"2475-1421","type":"electronic"}]}}